/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/nasa/route";
exports.ids = ["app/api/nasa/route"];
exports.modules = {

/***/ "(rsc)/./app/api/nasa/route.ts":
/*!*******************************!*\
  !*** ./app/api/nasa/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/dist/esm/index.js\");\n\n\n// Simple in-memory cache for articles\nlet articleCache = null;\nconst CACHE_TTL = 5 * 60 * 1000 // 5 minutes cache\n;\n// Helper function to extract National Geographic images (based on Python scraper)\nfunction extractNatGeoImages(html) {\n    const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n    const imageUrls = [];\n    const divs = $('div.BackgroundImage.BackgroundImage--zoom.PromoTile__Header__Image');\n    divs.each((_, div)=>{\n        const style = $(div).attr('style') || '';\n        const match = style.match(/background-image:\\s*url\\(\"([^\"]+)\"\\)/);\n        if (match && match[1]) {\n            let imgSrc = match[1];\n            if (imgSrc.startsWith('//')) {\n                imgSrc = `https:${imgSrc}`;\n            } else if (imgSrc.startsWith('/')) {\n                imgSrc = `https://www.nationalgeographic.com${imgSrc}`;\n            }\n            imageUrls.push(imgSrc);\n        }\n    });\n    return imageUrls;\n}\nfunction generateIdFromLink(link) {\n    try {\n        return encodeURIComponent(link);\n    } catch  {\n        return Math.random().toString(36).slice(2);\n    }\n}\nasync function scrapeNasaNews(year = 2025) {\n    const url = `https://www.nasa.gov/${year}-news-releases/`;\n    const headers = {\n        \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n        \"accept-language\": \"en-US,en;q=0.5\",\n        \"accept-encoding\": \"gzip, deflate, br\",\n        referer: \"https://www.google.com/\",\n        \"sec-fetch-dest\": \"document\",\n        \"sec-fetch-mode\": \"navigate\",\n        \"sec-fetch-site\": \"cross-site\",\n        \"upgrade-insecure-requests\": \"1\"\n    };\n    try {\n        console.log(`Scraping NASA news: ${url}`);\n        const res = await fetch(url, {\n            headers,\n            cache: \"no-store\"\n        });\n        if (!res.ok) {\n            throw new Error(`Failed to fetch NASA news: ${res.status}`);\n        }\n        const html = await res.text();\n        if (!html || html.length < 100) {\n            throw new Error(\"Empty response from NASA\");\n        }\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n        const results = [];\n        // Find each article block using NASA's structure\n        for(let i = 0; i < $('div.hds-content-item').length; i++){\n            const item = $('div.hds-content-item').eq(i);\n            const $item = $(item);\n            const inner = $item.find('div.hds-content-item-inner');\n            if (inner.length === 0) continue;\n            // Debug: Log basic info for first few items\n            if (results.length < 2) {\n                console.log(`NASA Item ${results.length + 1} - Found article structure`);\n            }\n            // Extract the link\n            const linkEl = inner.find('a.hds-content-item-heading[href]');\n            // Extract the title\n            const titleEl = inner.find('div.hds-a11y-heading-22');\n            if (linkEl.length > 0 && titleEl.length > 0) {\n                let link = linkEl.attr('href') || '';\n                let title = titleEl.text().trim();\n                if (title && link) {\n                    // Ensure absolute URL\n                    if (link.startsWith(\"/\")) {\n                        link = `https://www.nasa.gov${link}`;\n                    } else if (!link.startsWith(\"http\")) {\n                        link = `https://www.nasa.gov/${link}`;\n                    }\n                    // Get summary from description if available\n                    const summaryEl = inner.find('div.hds-content-item-description, p');\n                    let summary = summaryEl.text().trim() || title;\n                    // Extract publication date from various possible locations\n                    let articleDate = new Date().toISOString() // fallback to current date\n                    ;\n                    // Try to find date in various formats and locations\n                    // Based on the actual NASA structure, dates are in spans with \"heading-12 text-uppercase\" classes\n                    const dateSelectors = [\n                        'span.heading-12.text-uppercase',\n                        'span[class*=\"heading-12\"]',\n                        'span[class*=\"text-uppercase\"]',\n                        'time[datetime]',\n                        '.hds-content-item-date',\n                        '.date',\n                        '.published-date',\n                        '.release-date',\n                        '[class*=\"date\"]',\n                        'span[class*=\"date\"]',\n                        '.hds-content-item-meta',\n                        '.meta',\n                        '[class*=\"meta\"]'\n                    ];\n                    // First try within the inner container\n                    for (const dateSelector of dateSelectors){\n                        const dateEl = inner.find(dateSelector).first();\n                        if (dateEl.length > 0) {\n                            // Try datetime attribute first\n                            let dateStr = dateEl.attr('datetime') || dateEl.text().trim();\n                            if (dateStr) {\n                                // Clean up the date string but preserve the NASA format\n                                dateStr = dateStr.trim();\n                                // Try to parse various date formats including NASA's \"Aug 20, 2025\" format\n                                let parsedDate = new Date(dateStr);\n                                // If direct parsing fails, try to handle NASA's specific format\n                                if (isNaN(parsedDate.getTime())) {\n                                    // Handle formats like \"Aug 20, 2025\", \"AUG 20, 2025\", etc.\n                                    const nasaDateMatch = dateStr.match(/([A-Za-z]{3})\\s+(\\d{1,2}),?\\s+(\\d{4})/i);\n                                    if (nasaDateMatch) {\n                                        const [, month, day, year] = nasaDateMatch;\n                                        parsedDate = new Date(`${month} ${day}, ${year}`);\n                                    }\n                                }\n                                if (!isNaN(parsedDate.getTime())) {\n                                    articleDate = parsedDate.toISOString();\n                                    console.log(`Found NASA date from inner selector ${dateSelector}: \"${dateStr}\" -> ${articleDate}`);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // If no date found in inner container, try the parent item container\n                    if (articleDate === new Date().toISOString()) {\n                        for (const dateSelector of dateSelectors){\n                            const dateEl = $item.find(dateSelector).first();\n                            if (dateEl.length > 0) {\n                                let dateStr = dateEl.attr('datetime') || dateEl.text().trim();\n                                if (dateStr) {\n                                    dateStr = dateStr.trim();\n                                    // Try to parse various date formats including NASA's \"Aug 20, 2025\" format\n                                    let parsedDate = new Date(dateStr);\n                                    // If direct parsing fails, try to handle NASA's specific format\n                                    if (isNaN(parsedDate.getTime())) {\n                                        // Handle formats like \"Aug 20, 2025\", \"AUG 20, 2025\", etc.\n                                        const nasaDateMatch = dateStr.match(/([A-Za-z]{3})\\s+(\\d{1,2}),?\\s+(\\d{4})/i);\n                                        if (nasaDateMatch) {\n                                            const [, month, day, year] = nasaDateMatch;\n                                            parsedDate = new Date(`${month} ${day}, ${year}`);\n                                        }\n                                    }\n                                    if (!isNaN(parsedDate.getTime())) {\n                                        articleDate = parsedDate.toISOString();\n                                        console.log(`Found NASA date from parent selector ${dateSelector}: \"${dateStr}\" -> ${articleDate}`);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // If still no date found, try to extract from the URL pattern\n                    if (articleDate === new Date().toISOString()) {\n                        // Try to extract date from URL pattern (e.g., /2025/01/15/article-name)\n                        const urlDateMatch = link.match(/\\/(\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})\\//);\n                        if (urlDateMatch) {\n                            const [, year, month, day] = urlDateMatch;\n                            const urlDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n                            if (!isNaN(urlDate.getTime())) {\n                                articleDate = urlDate.toISOString();\n                                console.log(`Found NASA date from URL: ${year}-${month}-${day} -> ${articleDate}`);\n                            }\n                        }\n                    }\n                    // If still no date, try to extract from title (sometimes contains date info)\n                    if (articleDate === new Date().toISOString()) {\n                        const titleDateMatch = title.match(/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})|(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\n                        if (titleDateMatch) {\n                            let year, month, day;\n                            if (titleDateMatch[3]) {\n                                // MM/DD/YYYY format\n                                [, month, day, year] = titleDateMatch;\n                            } else {\n                                // YYYY-MM-DD format\n                                [, , , year, month, day] = titleDateMatch;\n                            }\n                            const titleDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n                            if (!isNaN(titleDate.getTime())) {\n                                articleDate = titleDate.toISOString();\n                                console.log(`Found NASA date from title: ${year}-${month}-${day} -> ${articleDate}`);\n                            }\n                        }\n                    }\n                    // If still no date found, use the year from the URL and create a reasonable date\n                    if (articleDate === new Date().toISOString()) {\n                        // Since we're scraping from /2025-news-releases/, use 2025 as the year\n                        // and create a date that's progressively older for each article\n                        const daysAgo = results.length * 2 // Each article is 2 days older than the previous\n                        ;\n                        const fallbackDate = new Date();\n                        fallbackDate.setDate(fallbackDate.getDate() - daysAgo);\n                        fallbackDate.setFullYear(year) // Use the year from the URL\n                        ;\n                        articleDate = fallbackDate.toISOString();\n                        console.log(`Using fallback NASA date for article ${results.length + 1}: ${articleDate} (${daysAgo} days ago)`);\n                    }\n                    // Try to find an image - NASA uses thumbnail links with images\n                    let imageUrl = \"/placeholder.svg\";\n                    // Debug: Check what image elements exist\n                    if (results.length < 2) {\n                        console.log(`NASA Article ${results.length + 1} - Checking for image elements:`);\n                        const thumbnailLinks = $item.find('a.hds-content-item-thumbnail');\n                        console.log(`  Thumbnail links found: ${thumbnailLinks.length}`);\n                        const allImages = $item.find('img');\n                        console.log(`  All images found: ${allImages.length}`);\n                    }\n                    // First try to find the thumbnail link structure (a.hds-content-item-thumbnail > img)\n                    const thumbnailLink = $item.find('a.hds-content-item-thumbnail');\n                    if (thumbnailLink.length > 0) {\n                        const imgEl = thumbnailLink.find('img').first();\n                        if (imgEl.length > 0) {\n                            let imgSrc = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src');\n                            if (imgSrc) {\n                                if (imgSrc.startsWith('//')) {\n                                    imgSrc = `https:${imgSrc}`;\n                                } else if (imgSrc.startsWith('/')) {\n                                    imgSrc = `https://www.nasa.gov${imgSrc}`;\n                                }\n                                imageUrl = imgSrc;\n                                console.log(`Found NASA thumbnail image: ${imageUrl}`);\n                            }\n                        }\n                    }\n                    // If no thumbnail found, try to find any image in the inner container\n                    if (imageUrl === \"/placeholder.svg\") {\n                        const imgEl = inner.find('img').first();\n                        if (imgEl.length > 0) {\n                            let imgSrc = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src');\n                            if (imgSrc) {\n                                if (imgSrc.startsWith('//')) {\n                                    imgSrc = `https:${imgSrc}`;\n                                } else if (imgSrc.startsWith('/')) {\n                                    imgSrc = `https://www.nasa.gov${imgSrc}`;\n                                }\n                                imageUrl = imgSrc;\n                                console.log(`Found NASA inner image: ${imageUrl}`);\n                            }\n                        }\n                    }\n                    // If still no image, try to find any image in the entire item\n                    if (imageUrl === \"/placeholder.svg\") {\n                        const imgEl = $item.find('img').first();\n                        if (imgEl.length > 0) {\n                            let imgSrc = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src');\n                            if (imgSrc) {\n                                if (imgSrc.startsWith('//')) {\n                                    imgSrc = `https:${imgSrc}`;\n                                } else if (imgSrc.startsWith('/')) {\n                                    imgSrc = `https://www.nasa.gov${imgSrc}`;\n                                }\n                                imageUrl = imgSrc;\n                                console.log(`Found NASA item image: ${imageUrl}`);\n                            }\n                        }\n                    }\n                    // If no image found, use NASA-themed placeholder\n                    if (imageUrl === \"/placeholder.svg\") {\n                        const nasaImages = [\n                            \"https://www.nasa.gov/sites/default/files/thumbnails/image/nasa-logo-web-rgb.png\",\n                            \"https://www.nasa.gov/sites/default/files/thumbnails/image/iss_crew_photo.jpg\",\n                            \"https://www.nasa.gov/sites/default/files/thumbnails/image/artemis_mission.jpg\",\n                            \"https://www.nasa.gov/sites/default/files/thumbnails/image/mars_rover.jpg\",\n                            \"https://www.nasa.gov/sites/default/files/thumbnails/image/space_station.jpg\"\n                        ];\n                        imageUrl = nasaImages[Math.floor(Math.random() * nasaImages.length)];\n                    }\n                    // Create the article object first\n                    const article = {\n                        id: generateIdFromLink(link),\n                        title: title.slice(0, 200),\n                        summary: summary.slice(0, 300) || title.slice(0, 300),\n                        content: `Read the full NASA article: ${link}`,\n                        imageUrl: imageUrl,\n                        date: articleDate,\n                        source: \"NASA\"\n                    };\n                    // Try to fetch the individual article page to get the actual date\n                    try {\n                        console.log(`Fetching individual NASA article for date: ${link}`);\n                        const articleResponse = await fetch(link, {\n                            headers: {\n                                \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n                                accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                                \"accept-language\": \"en-US,en;q=0.5\",\n                                \"accept-encoding\": \"gzip, deflate, br\",\n                                referer: \"https://www.nasa.gov/\",\n                                \"sec-fetch-dest\": \"document\",\n                                \"sec-fetch-mode\": \"navigate\",\n                                \"sec-fetch-site\": \"same-origin\",\n                                \"upgrade-insecure-requests\": \"1\"\n                            },\n                            cache: \"no-store\"\n                        });\n                        if (articleResponse.ok) {\n                            const articleHtml = await articleResponse.text();\n                            const $article = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(articleHtml);\n                            // Look for the date in the individual article page\n                            const dateSelectors = [\n                                'span.heading-12.text-uppercase',\n                                'span[class*=\"heading-12\"]',\n                                'span[class*=\"text-uppercase\"]',\n                                'time[datetime]',\n                                '.article-date',\n                                '.publish-date',\n                                '.release-date',\n                                '[class*=\"date\"]'\n                            ];\n                            for (const dateSelector of dateSelectors){\n                                const dateEl = $article(dateSelector).first();\n                                if (dateEl.length > 0) {\n                                    let dateStr = dateEl.attr('datetime') || dateEl.text().trim();\n                                    if (dateStr) {\n                                        dateStr = dateStr.trim();\n                                        // Try to parse NASA's date format \"Sep 12, 2025\"\n                                        let parsedDate = new Date(dateStr);\n                                        if (isNaN(parsedDate.getTime())) {\n                                            const nasaDateMatch = dateStr.match(/([A-Za-z]{3})\\s+(\\d{1,2}),?\\s+(\\d{4})/i);\n                                            if (nasaDateMatch) {\n                                                const [, month, day, year] = nasaDateMatch;\n                                                parsedDate = new Date(`${month} ${day}, ${year}`);\n                                            }\n                                        }\n                                        if (!isNaN(parsedDate.getTime())) {\n                                            article.date = parsedDate.toISOString();\n                                            console.log(`Found actual NASA date from individual article: \"${dateStr}\" -> ${article.date}`);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            // Also try to get a better image from the individual article page\n                            if (article.imageUrl === \"/placeholder.svg\" || article.imageUrl.includes('nasa-logo-web-rgb.png')) {\n                                const imageSelectors = [\n                                    '.article-hero img',\n                                    '.featured-image img',\n                                    '.article-image img',\n                                    'figure img',\n                                    'article img',\n                                    'img[src*=\"nasa.gov\"]'\n                                ];\n                                for (const imgSelector of imageSelectors){\n                                    const imgEl = $article(imgSelector).first();\n                                    if (imgEl.length > 0) {\n                                        let imgSrc = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src');\n                                        if (imgSrc) {\n                                            if (imgSrc.startsWith('//')) {\n                                                imgSrc = `https:${imgSrc}`;\n                                            } else if (imgSrc.startsWith('/')) {\n                                                imgSrc = `https://www.nasa.gov${imgSrc}`;\n                                            }\n                                            if (imgSrc.includes('nasa.gov') && !imgSrc.includes('nasa-logo-web-rgb.png')) {\n                                                article.imageUrl = imgSrc;\n                                                console.log(`Found better NASA image from individual article: ${imgSrc}`);\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } catch (articleError) {\n                        console.log(`Could not fetch individual NASA article for date: ${articleError}`);\n                    // Keep the fallback date\n                    }\n                    results.push(article);\n                }\n            }\n        }\n        console.log(`Found ${results.length} NASA articles`);\n        return results.slice(0, 10) // Limit to 10 articles for faster loading\n        ;\n    } catch (error) {\n        console.log(`Error fetching NASA news:`, error);\n        throw error;\n    }\n}\nasync function scrapeNatGeoSpace() {\n    const url = \"https://www.nationalgeographic.com/science/topic/space\";\n    const headers = {\n        \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n        \"accept-language\": \"en-US,en;q=0.5\",\n        \"accept-encoding\": \"gzip, deflate, br\",\n        referer: \"https://www.google.com/\",\n        \"sec-fetch-dest\": \"document\",\n        \"sec-fetch-mode\": \"navigate\",\n        \"sec-fetch-site\": \"cross-site\",\n        \"upgrade-insecure-requests\": \"1\"\n    };\n    try {\n        console.log(`Scraping National Geographic Space: ${url}`);\n        const res = await fetch(url, {\n            headers,\n            cache: \"no-store\"\n        });\n        if (!res.ok) {\n            throw new Error(`Failed to fetch National Geographic: ${res.status}`);\n        }\n        const html = await res.text();\n        if (!html || html.length < 100) {\n            throw new Error(\"Empty response from National Geographic\");\n        }\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n        const results = [];\n        // Test the image extraction helper function\n        const extractedImages = extractNatGeoImages(html);\n        console.log(`National Geographic: Found ${extractedImages.length} images using Python-style extraction`);\n        if (extractedImages.length > 0) {\n            console.log(`Sample images: ${extractedImages.slice(0, 3).join(', ')}`);\n        }\n        // Find each article tile using National Geographic's structure\n        for(let i = 0; i < $('div.col[aria-label]').length; i++){\n            const tile = $('div.col[aria-label]').eq(i);\n            const $tile = $(tile);\n            const title = $tile.attr('aria-label')?.trim();\n            if (!title) continue;\n            // Debug: Check what link elements exist\n            if (results.length < 2) {\n                console.log(`National Geographic Article ${results.length + 1} - Checking for link elements:`);\n                const promoLinks = $tile.find('a.AnchorLink.PromoTile_Link');\n                console.log(`  PromoTile_Link found: ${promoLinks.length}`);\n                const oldPromoLinks = $tile.find('a.AnchorLink.PromoTile__Link');\n                console.log(`  PromoTile__Link found: ${oldPromoLinks.length}`);\n                const allLinks = $tile.find('a[href]');\n                console.log(`  All links found: ${allLinks.length}`);\n            }\n            // Find the promo anchor link - National Geographic uses AnchorLink PromoTile_Link\n            let linkEl = $tile.find('a.AnchorLink.PromoTile_Link[href]').first();\n            if (linkEl.length === 0) {\n                // Fallback: try the old selector\n                linkEl = $tile.find('a.AnchorLink.PromoTile__Link[href]').first();\n            }\n            if (linkEl.length === 0) {\n                // Final fallback: any anchor\n                linkEl = $tile.find('a[href]').first();\n            }\n            if (linkEl.length === 0) continue;\n            let link = linkEl.attr('href') || '';\n            if (!link) continue;\n            // Ensure absolute URL\n            if (link.startsWith('/')) {\n                link = `https://www.nationalgeographic.com${link}`;\n            } else if (!link.startsWith('http')) {\n                link = `https://www.nationalgeographic.com/${link}`;\n            }\n            // Try to find an image - National Geographic uses background images in divs\n            let imageUrl = \"/placeholder.svg\";\n            // First try to use an image from the extracted images list if available\n            if (extractedImages.length > results.length && extractedImages[results.length]) {\n                imageUrl = extractedImages[results.length];\n                console.log(`Using extracted image for National Geographic article ${results.length + 1}: ${imageUrl}`);\n            }\n            // Debug: Check what image elements exist\n            if (results.length < 2) {\n                console.log(`National Geographic Article ${results.length + 1} - Checking for image elements:`);\n                const backgroundDivs = $tile.find('div.BackgroundImage');\n                console.log(`  Background image divs found: ${backgroundDivs.length}`);\n                const specificBackgroundDivs = $tile.find('div.BackgroundImage.BackgroundImage--zoom.PromoTile__Header__Image');\n                console.log(`  PromoTile__Header__Image divs found: ${specificBackgroundDivs.length}`);\n                const altBackgroundDivs = $tile.find('div.BackgroundImage.BackgroundImage--zoom.PromoTile_Header__Image');\n                console.log(`  PromoTile_Header__Image divs found: ${altBackgroundDivs.length}`);\n                const regularImages = $tile.find('img');\n                console.log(`  Regular images found: ${regularImages.length}`);\n            }\n            // Only try to find background images if we don't already have one from extraction\n            if (imageUrl === \"/placeholder.svg\") {\n                // First try to find background images using the exact selector from the Python scraper\n                let backgroundDiv = $tile.find('div.BackgroundImage.BackgroundImage--zoom.PromoTile__Header__Image').first();\n                if (backgroundDiv.length === 0) {\n                    // Try alternative selector with single underscore\n                    backgroundDiv = $tile.find('div.BackgroundImage.BackgroundImage--zoom.PromoTile_Header__Image').first();\n                }\n                if (backgroundDiv.length === 0) {\n                    // Try any BackgroundImage div with zoom\n                    backgroundDiv = $tile.find('div.BackgroundImage.BackgroundImage--zoom').first();\n                }\n                if (backgroundDiv.length === 0) {\n                    // Try any BackgroundImage div\n                    backgroundDiv = $tile.find('div.BackgroundImage').first();\n                }\n                if (backgroundDiv.length > 0) {\n                    const style = backgroundDiv.attr('style') || '';\n                    console.log(`National Geographic Article ${results.length + 1} - Background div style: ${style.substring(0, 100)}...`);\n                    // Extract background-image URL from style attribute using the exact regex from Python\n                    const bgMatch = style.match(/background-image:\\s*url\\(\"([^\"]+)\"\\)/);\n                    if (bgMatch && bgMatch[1]) {\n                        let imgSrc = bgMatch[1];\n                        if (imgSrc.startsWith('//')) {\n                            imgSrc = `https:${imgSrc}`;\n                        } else if (imgSrc.startsWith('/')) {\n                            imgSrc = `https://www.nationalgeographic.com${imgSrc}`;\n                        }\n                        imageUrl = imgSrc;\n                        console.log(`Found National Geographic background image: ${imageUrl}`);\n                    } else {\n                        console.log(`No background-image URL found in style: ${style}`);\n                    }\n                }\n            }\n            // Fallback: try to find any div with background-image style\n            if (imageUrl === \"/placeholder.svg\") {\n                $tile.find('div[style*=\"background-image\"]').each((_, div)=>{\n                    const $div = $(div);\n                    const style = $div.attr('style') || '';\n                    // Use the exact regex pattern from the Python scraper\n                    const bgMatch = style.match(/background-image:\\s*url\\(\"([^\"]+)\"\\)/);\n                    if (bgMatch && bgMatch[1]) {\n                        let imgSrc = bgMatch[1];\n                        if (imgSrc.startsWith('//')) {\n                            imgSrc = `https:${imgSrc}`;\n                        } else if (imgSrc.startsWith('/')) {\n                            imgSrc = `https://www.nationalgeographic.com${imgSrc}`;\n                        }\n                        imageUrl = imgSrc;\n                        console.log(`Found National Geographic background image from fallback div: ${imageUrl}`);\n                        return false // Break the loop\n                        ;\n                    }\n                });\n            }\n            // Final fallback: try regular img elements\n            if (imageUrl === \"/placeholder.svg\") {\n                const imgEl = $tile.find('img').first();\n                if (imgEl.length > 0) {\n                    let imgSrc = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src');\n                    if (imgSrc) {\n                        if (imgSrc.startsWith('//')) {\n                            imgSrc = `https:${imgSrc}`;\n                        } else if (imgSrc.startsWith('/')) {\n                            imgSrc = `https://www.nationalgeographic.com${imgSrc}`;\n                        }\n                        imageUrl = imgSrc;\n                        console.log(`Found National Geographic regular image: ${imageUrl}`);\n                    }\n                }\n            }\n            // If no image found, use National Geographic-themed placeholder\n            if (imageUrl === \"/placeholder.svg\") {\n                const natgeoImages = [\n                    \"https://www.nationalgeographic.com/content/dam/ngdotcom/rights-exports/homepage/2023/ng-logo-2fl.png\",\n                    \"https://www.nationalgeographic.com/content/dam/ngdotcom/rights-exports/homepage/2023/space-hero.jpg\",\n                    \"https://www.nationalgeographic.com/content/dam/ngdotcom/rights-exports/homepage/2023/astronomy-hero.jpg\",\n                    \"https://www.nationalgeographic.com/content/dam/ngdotcom/rights-exports/homepage/2023/earth-hero.jpg\"\n                ];\n                imageUrl = natgeoImages[Math.floor(Math.random() * natgeoImages.length)];\n            }\n            // Try to get a better date by fetching the individual article\n            let articleDate = new Date().toISOString();\n            try {\n                console.log(`Fetching individual National Geographic article for date: ${link}`);\n                const articleResponse = await fetch(link, {\n                    headers: {\n                        \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n                        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                        \"accept-language\": \"en-US,en;q=0.5\",\n                        \"accept-encoding\": \"gzip, deflate, br\",\n                        referer: \"https://www.nationalgeographic.com/\",\n                        \"sec-fetch-dest\": \"document\",\n                        \"sec-fetch-mode\": \"navigate\",\n                        \"sec-fetch-site\": \"same-origin\",\n                        \"upgrade-insecure-requests\": \"1\"\n                    },\n                    cache: \"no-store\"\n                });\n                if (articleResponse.ok) {\n                    const articleHtml = await articleResponse.text();\n                    const $article = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(articleHtml);\n                    // Look for date in National Geographic articles\n                    // Based on the structure shown, dates are in divs with multiple classes\n                    // Debug: Log what we're looking for\n                    if (results.length < 2) {\n                        console.log(`National Geographic Article ${results.length + 1} - Checking for date elements`);\n                    }\n                    const dateSelectors = [\n                        'time[datetime]',\n                        '.article-date',\n                        '.publish-date',\n                        '.byline-date',\n                        '[data-testid=\"PublishDate\"]',\n                        '.timestamp',\n                        '.date',\n                        // National Geographic specific selectors based on the structure\n                        'div[class*=\"jTKbV\"][class*=\"zIIsP\"][class*=\"ZdbeE\"]',\n                        'div[class*=\"JQYD\"]',\n                        'div[class*=\"QtiLO\"]',\n                        'div[class*=\"xAPpq\"]',\n                        // More generic selectors for date-like content\n                        'div:contains(\"September\")',\n                        'div:contains(\"August\")',\n                        'div:contains(\"July\")',\n                        'div:contains(\"June\")',\n                        'div:contains(\"May\")',\n                        'div:contains(\"April\")',\n                        'div:contains(\"March\")',\n                        'div:contains(\"February\")',\n                        'div:contains(\"January\")',\n                        'div:contains(\"December\")',\n                        'div:contains(\"November\")',\n                        'div:contains(\"October\")'\n                    ];\n                    for (const dateSelector of dateSelectors){\n                        const dateEl = $article(dateSelector).first();\n                        if (dateEl.length > 0) {\n                            let dateStr = dateEl.attr('datetime') || dateEl.text().trim();\n                            if (dateStr) {\n                                // Try to parse the date string\n                                let parsedDate = new Date(dateStr);\n                                // If direct parsing fails, try to handle National Geographic's format\n                                if (isNaN(parsedDate.getTime())) {\n                                    // Handle formats like \"September 12, 2025\", \"Sep 12, 2025\", etc.\n                                    const natgeoDateMatch = dateStr.match(/([A-Za-z]+)\\s+(\\d{1,2}),?\\s+(\\d{4})/i);\n                                    if (natgeoDateMatch) {\n                                        const [, month, day, year] = natgeoDateMatch;\n                                        parsedDate = new Date(`${month} ${day}, ${year}`);\n                                    }\n                                }\n                                if (!isNaN(parsedDate.getTime())) {\n                                    articleDate = parsedDate.toISOString();\n                                    console.log(`Found National Geographic date: \"${dateStr}\" -> ${articleDate}`);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // If no date found with selectors, try searching for date patterns in all text\n                    if (articleDate === new Date().toISOString()) {\n                        const allText = $article('body').text();\n                        const datePatterns = [\n                            /([A-Za-z]+)\\s+(\\d{1,2}),?\\s+(\\d{4})/g,\n                            /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/g,\n                            /(\\d{4})-(\\d{1,2})-(\\d{1,2})/g // \"2025-09-12\"\n                        ];\n                        for (const pattern of datePatterns){\n                            const matches = allText.match(pattern);\n                            if (matches && matches.length > 0) {\n                                const dateStr = matches[0];\n                                const parsedDate = new Date(dateStr);\n                                if (!isNaN(parsedDate.getTime())) {\n                                    articleDate = parsedDate.toISOString();\n                                    console.log(`Found National Geographic date via text search: \"${dateStr}\" -> ${articleDate}`);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // Also try to get a better image from the individual article\n                    if (imageUrl === \"/placeholder.svg\" || imageUrl.includes('ng-logo')) {\n                        const imageSelectors = [\n                            '.article-hero img',\n                            '.featured-image img',\n                            '.article-image img',\n                            'figure img',\n                            'article img',\n                            'img[src*=\"nationalgeographic.com\"]'\n                        ];\n                        for (const imgSelector of imageSelectors){\n                            const imgEl = $article(imgSelector).first();\n                            if (imgEl.length > 0) {\n                                let imgSrc = imgEl.attr('src') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src');\n                                if (imgSrc) {\n                                    if (imgSrc.startsWith('//')) {\n                                        imgSrc = `https:${imgSrc}`;\n                                    } else if (imgSrc.startsWith('/')) {\n                                        imgSrc = `https://www.nationalgeographic.com${imgSrc}`;\n                                    }\n                                    if (imgSrc.includes('nationalgeographic.com') && !imgSrc.includes('ng-logo')) {\n                                        imageUrl = imgSrc;\n                                        console.log(`Found better National Geographic image: ${imgSrc}`);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (articleError) {\n                console.log(`Could not fetch individual National Geographic article: ${articleError}`);\n            }\n            const article = {\n                id: generateIdFromLink(link),\n                title: title.slice(0, 200),\n                summary: title.slice(0, 300),\n                content: `Read the full National Geographic article: ${link}`,\n                imageUrl: imageUrl,\n                date: articleDate,\n                source: \"National Geographic\"\n            };\n            results.push(article);\n        }\n        console.log(`Found ${results.length} National Geographic articles`);\n        return results.slice(0, 8) // Limit to 8 articles for faster loading\n        ;\n    } catch (error) {\n        console.log(`Error fetching National Geographic news:`, error);\n        throw error;\n    }\n}\nasync function scrapeSpaceNews() {\n    // Try multiple Space.com URLs\n    const urls = [\n        \"https://www.space.com/news\",\n        \"https://www.space.com/news/\",\n        \"https://www.space.com/\"\n    ];\n    const headers = {\n        \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n        \"accept-language\": \"en-US,en;q=0.5\",\n        \"accept-encoding\": \"gzip, deflate, br\",\n        referer: \"https://www.google.com/\",\n        \"sec-fetch-dest\": \"document\",\n        \"sec-fetch-mode\": \"navigate\",\n        \"sec-fetch-site\": \"cross-site\",\n        \"upgrade-insecure-requests\": \"1\"\n    };\n    for (const url of urls){\n        try {\n            console.log(`Scraping Space.com news: ${url}`);\n            const res = await fetch(url, {\n                headers,\n                cache: \"no-store\"\n            });\n            if (!res.ok) {\n                console.log(`Failed to fetch ${url}: ${res.status}`);\n                continue;\n            }\n            const html = await res.text();\n            if (!html || html.length < 100) {\n                console.log(`Empty response from ${url}`);\n                continue;\n            }\n            const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n            const results = [];\n            // Try multiple selectors for Space.com articles\n            const selectors = [\n                \"article\",\n                \".listingResult\",\n                \".news-item\",\n                \".article-item\",\n                \"[data-module='ArticleListItem']\",\n                \".vanilla-image-block\",\n                \".hawk-item\",\n                \".summary-item\",\n                \".entry-title\",\n                \"[class*='article']\",\n                \"[class*='post']\"\n            ];\n            for (const selector of selectors){\n                console.log(`Trying Space.com selector: ${selector} on ${url}`);\n                $(selector).each((_, el)=>{\n                    const $el = $(el);\n                    let title = \"\";\n                    let link = \"\";\n                    let summary = \"\";\n                    let imageUrl = \"/placeholder.svg\";\n                    // Method 1: Look for article title and link\n                    const titleLink = $el.find(\"h1 a, h2 a, h3 a, .article-name a, .article-link, .entry-title a\").first();\n                    if (titleLink.length > 0) {\n                        title = titleLink.text().trim();\n                        link = titleLink.attr(\"href\") || \"\";\n                    }\n                    // Method 2: Look for title in various heading tags\n                    if (!title) {\n                        const titleEl = $el.find(\"h1, h2, h3, h4, .title, [class*='title'], [class*='name'], .entry-title\").first();\n                        title = titleEl.text().trim();\n                        if (!link) {\n                            const linkEl = $el.find(\"a\").first();\n                            link = linkEl.attr(\"href\") || \"\";\n                        }\n                    }\n                    // Method 3: Check if element itself is a link\n                    if (!title && $el.is(\"a\")) {\n                        title = $el.text().trim();\n                        link = $el.attr(\"href\") || \"\";\n                    }\n                    // Extract image from various sources with more comprehensive approach\n                    const imageSelectors = [\n                        'figure[data-original]',\n                        'figure img',\n                        'img[data-original]',\n                        'img[data-src]',\n                        'img[data-lazy-src]',\n                        'img.lazy',\n                        'img[src*=\"space.com\"]',\n                        'img[src*=\"cdn.mos.cms.futurecdn.net\"]',\n                        '.article-image img',\n                        '.listing-image img',\n                        '.vanilla-image-block img',\n                        'picture img',\n                        'img[src]'\n                    ];\n                    for (const imgSelector of imageSelectors){\n                        const imgEl = $el.find(imgSelector).first();\n                        if (imgEl.length > 0) {\n                            // Try multiple data attributes and src\n                            let imgSrc = imgEl.attr('data-original') || imgEl.attr('data-src') || imgEl.attr('data-lazy-src') || imgEl.attr('srcset')?.split(' ')[0] || imgEl.attr('src') || imgEl.parent().attr('data-original');\n                            if (imgSrc) {\n                                // Clean up srcset format if present\n                                if (imgSrc.includes(' ')) {\n                                    imgSrc = imgSrc.split(' ')[0];\n                                }\n                                // Ensure absolute URL\n                                if (imgSrc.startsWith('//')) {\n                                    imgSrc = `https:${imgSrc}`;\n                                } else if (imgSrc.startsWith('/')) {\n                                    imgSrc = `https://www.space.com${imgSrc}`;\n                                }\n                                // Validate it's a proper image URL and not a placeholder\n                                if (imgSrc && !imgSrc.includes('placeholder') && !imgSrc.includes('data:image') && (imgSrc.includes('space.com') || imgSrc.includes('futurecdn.net')) && (imgSrc.includes('.jpg') || imgSrc.includes('.jpeg') || imgSrc.includes('.png') || imgSrc.includes('.webp'))) {\n                                    imageUrl = imgSrc;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // If no image found, assign a thematic space image based on title keywords\n                    if (imageUrl === \"/placeholder.svg\" && title) {\n                        const spaceImages = [\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-space-1.jpg\",\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-moon-1.jpg\",\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-mars-1.jpg\",\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-telescope-1.jpg\",\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-galaxy-1.jpg\",\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-rocket-1.jpg\",\n                            \"https://cdn.mos.cms.futurecdn.net/YzQzNzQzNzQzNzQz-saturn-1.jpg\" // Saturn\n                        ];\n                        const lowerTitle = title.toLowerCase();\n                        if (lowerTitle.includes('moon') || lowerTitle.includes('lunar') || lowerTitle.includes('eclipse')) {\n                            imageUrl = spaceImages[1];\n                        } else if (lowerTitle.includes('mars') || lowerTitle.includes('rover')) {\n                            imageUrl = spaceImages[2];\n                        } else if (lowerTitle.includes('webb') || lowerTitle.includes('telescope') || lowerTitle.includes('hubble')) {\n                            imageUrl = spaceImages[3];\n                        } else if (lowerTitle.includes('galaxy') || lowerTitle.includes('star') || lowerTitle.includes('dust')) {\n                            imageUrl = spaceImages[4];\n                        } else if (lowerTitle.includes('spacex') || lowerTitle.includes('rocket') || lowerTitle.includes('launch')) {\n                            imageUrl = spaceImages[5];\n                        } else if (lowerTitle.includes('saturn') || lowerTitle.includes('planet')) {\n                            imageUrl = spaceImages[6];\n                        } else {\n                            // Default to a random space image\n                            imageUrl = spaceImages[Math.floor(Math.random() * spaceImages.length)];\n                        }\n                    }\n                    // Clean up title - remove extra whitespace and metadata\n                    if (title) {\n                        title = title.replace(/\\s+/g, ' ').replace(/By\\s+.*?last updated.*$/i, '').trim();\n                        if (title.includes('Homepage') || title.includes('Video') || title.length < 10) {\n                            return; // Skip non-article content\n                        }\n                    }\n                    // Get summary/description\n                    const summaryEl = $el.find(\".summary, .description, .excerpt, p\").first();\n                    summary = summaryEl.text().trim() || title;\n                    if (title && link && title.length > 10 && !title.toLowerCase().includes('homepage')) {\n                        // Ensure absolute URL\n                        if (link.startsWith(\"/\")) {\n                            link = `https://www.space.com${link}`;\n                        } else if (!link.startsWith(\"http\")) {\n                            link = `https://www.space.com/${link}`;\n                        }\n                        const article = {\n                            id: generateIdFromLink(link),\n                            title: title.slice(0, 200),\n                            summary: summary.slice(0, 300) || title.slice(0, 300),\n                            content: `Read the full article at Space.com: ${link}`,\n                            imageUrl: imageUrl,\n                            date: new Date().toISOString(),\n                            source: \"Space.com\"\n                        };\n                        results.push(article);\n                    }\n                });\n                if (results.length > 0) {\n                    console.log(`Found ${results.length} articles with selector: ${selector} from ${url}`);\n                    return results.slice(0, 8) // Limit to 8 articles for faster loading\n                    ;\n                }\n            }\n            console.log(`No articles found at ${url}`);\n        } catch (error) {\n            console.log(`Error fetching ${url}:`, error);\n            continue;\n        }\n    }\n    throw new Error(\"Could not scrape any articles from Space.com URLs\");\n}\n// Fallback space articles in case scraping fails\nconst fallbackSpaceArticles = [\n    {\n        id: \"space-1\",\n        title: \"SpaceX Starship Successfully Completes Orbital Test Flight\",\n        summary: \"The massive rocket achieved key milestones in its journey toward Mars missions.\",\n        content: \"SpaceX's Starship has completed another successful test flight, bringing the company closer to its goal of Mars colonization. The vehicle demonstrated improved heat shield performance and landing capabilities...\",\n        imageUrl: \"https://cdn.mos.cms.futurecdn.net/placeholder-spacex-starship.jpg\",\n        date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: \"Space.com\"\n    },\n    {\n        id: \"space-2\",\n        title: \"Astronomers Detect Mysterious Radio Signals from Distant Galaxy\",\n        summary: \"Fast radio bursts reveal new insights about the universe's magnetic fields.\",\n        content: \"A team of astronomers has detected a series of mysterious radio signals originating from a galaxy billions of light-years away. These fast radio bursts could help scientists understand cosmic magnetism...\",\n        imageUrl: \"https://cdn.mos.cms.futurecdn.net/placeholder-radio-telescope.jpg\",\n        date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: \"Space.com\"\n    },\n    {\n        id: \"space-3\",\n        title: \"China's Space Station Receives New Research Modules\",\n        summary: \"Tiangong space station expands capabilities for scientific experiments.\",\n        content: \"China has successfully attached new research modules to its Tiangong space station, significantly expanding the facility's scientific capabilities for microgravity research...\",\n        imageUrl: \"https://cdn.mos.cms.futurecdn.net/placeholder-tiangong-station.jpg\",\n        date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: \"Space.com\"\n    },\n    {\n        id: \"space-4\",\n        title: \"Europa Clipper Mission Launches to Jupiter's Icy Moon\",\n        summary: \"NASA probe begins journey to search for signs of life in Europa's subsurface ocean.\",\n        content: \"NASA's Europa Clipper spacecraft has begun its journey to Jupiter's moon Europa, where it will investigate the moon's subsurface ocean and potential for harboring life...\",\n        imageUrl: \"https://cdn.mos.cms.futurecdn.net/placeholder-europa-clipper.jpg\",\n        date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: \"Space.com\"\n    },\n    {\n        id: \"space-5\",\n        title: \"Breakthrough in Fusion Rocket Technology Could Enable Faster Mars Travel\",\n        summary: \"New propulsion system could cut Mars journey time to just 3 months.\",\n        content: \"Scientists have achieved a major breakthrough in fusion rocket technology that could revolutionize space travel, potentially reducing the journey time to Mars from 9 months to just 3 months...\",\n        imageUrl: \"https://cdn.mos.cms.futurecdn.net/placeholder-fusion-rocket.jpg\",\n        date: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: \"Space.com\"\n    }\n];\nasync function GET(request) {\n    try {\n        console.log(\"Space News API: Starting scrape attempt...\");\n        // Check cache first\n        const now = Date.now();\n        if (articleCache && now - articleCache.timestamp < CACHE_TTL) {\n            console.log(\"Returning cached articles\");\n            const oneWeekAgo = new Date();\n            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n            const recentArticles = articleCache.data.filter((article)=>{\n                const articleDate = new Date(article.date);\n                return articleDate >= oneWeekAgo;\n            });\n            const limitedArticles = recentArticles.slice(0, 15);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                articles: limitedArticles,\n                sources: {\n                    nasa: limitedArticles.filter((a)=>a.source === \"NASA\").length,\n                    natgeo: limitedArticles.filter((a)=>a.source === \"National Geographic\").length,\n                    space: limitedArticles.filter((a)=>a.source === \"Space.com\").length\n                },\n                cached: true,\n                filtered: {\n                    total: articleCache.data.length,\n                    recent: recentArticles.length,\n                    returned: limitedArticles.length\n                }\n            });\n        }\n        const allArticles = [];\n        let errors = [];\n        // Calculate date range for past week\n        const oneWeekAgo = new Date();\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n        const oneWeekAgoISO = oneWeekAgo.toISOString();\n        console.log(`Filtering articles from past week: ${oneWeekAgoISO} onwards`);\n        // Try to scrape NASA articles\n        try {\n            const nasaArticles = await scrapeNasaNews();\n            console.log(`NASA News API: Successfully scraped ${nasaArticles.length} articles`);\n            allArticles.push(...nasaArticles);\n        } catch (nasaError) {\n            console.log(\"NASA News API: Scraping failed:\", nasaError.message);\n            errors.push(\"NASA scraping failed\");\n        }\n        // Try to scrape National Geographic articles\n        try {\n            const natgeoArticles = await scrapeNatGeoSpace();\n            console.log(`National Geographic API: Successfully scraped ${natgeoArticles.length} articles`);\n            allArticles.push(...natgeoArticles);\n        } catch (natgeoError) {\n            console.log(\"National Geographic API: Scraping failed:\", natgeoError.message);\n            errors.push(\"National Geographic scraping failed\");\n        }\n        // Try to scrape Space.com articles\n        try {\n            const spaceArticles = await scrapeSpaceNews();\n            console.log(`Space News API: Successfully scraped ${spaceArticles.length} articles`);\n            allArticles.push(...spaceArticles);\n        } catch (spaceError) {\n            console.log(\"Space News API: Scraping failed:\", spaceError.message);\n            errors.push(\"Space.com scraping failed\");\n        }\n        // If we have articles from either source, filter and return them\n        if (allArticles.length > 0) {\n            // Filter articles to only include those from the past week\n            const recentArticles = allArticles.filter((article)=>{\n                const articleDate = new Date(article.date);\n                return articleDate >= oneWeekAgo;\n            });\n            console.log(`Filtered ${allArticles.length} articles down to ${recentArticles.length} from past week`);\n            // Sort by date (newest first)\n            recentArticles.sort((a, b)=>new Date(b.date).getTime() - new Date(a.date).getTime());\n            // Limit to top 15 articles for faster loading\n            const limitedArticles = recentArticles.slice(0, 15);\n            // Update cache\n            articleCache = {\n                data: allArticles,\n                timestamp: now\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                articles: limitedArticles,\n                sources: {\n                    nasa: limitedArticles.filter((a)=>a.source === \"NASA\").length,\n                    natgeo: limitedArticles.filter((a)=>a.source === \"National Geographic\").length,\n                    space: limitedArticles.filter((a)=>a.source === \"Space.com\").length\n                },\n                errors: errors.length > 0 ? errors : undefined,\n                filtered: {\n                    total: allArticles.length,\n                    recent: recentArticles.length,\n                    returned: limitedArticles.length\n                }\n            });\n        }\n        // If both scraping attempts failed, use fallback articles\n        console.log(\"Both scraping attempts failed, using fallback articles\");\n        const fallbackWithNote = fallbackSpaceArticles.map((article)=>({\n                ...article,\n                summary: `${article.summary} (Note: Live feeds temporarily unavailable)`\n            }));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            articles: fallbackWithNote,\n            note: \"Using fallback space articles - live scraping temporarily unavailable\",\n            errors: errors\n        });\n    } catch (error) {\n        console.error(\"Space News API: Fatal error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message ?? \"Failed to load space articles.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/nasa/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnasa%2Froute&page=%2Fapi%2Fnasa%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnasa%2Froute.ts&appDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnasa%2Froute&page=%2Fapi%2Fnasa%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnasa%2Froute.ts&appDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_mails_Cosmic_News_1_astro_news_app_api_nasa_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/nasa/route.ts */ \"(rsc)/./app/api/nasa/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/nasa/route\",\n        pathname: \"/api/nasa\",\n        filename: \"route\",\n        bundlePath: \"app/api/nasa/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\mails\\\\Cosmic-News-1\\\\astro-news\\\\app\\\\api\\\\nasa\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_mails_Cosmic_News_1_astro_news_app_api_nasa_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZuYXNhJTJGcm91dGUmcGFnZT0lMkZhcGklMkZuYXNhJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGbmFzYSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNtYWlscyU1Q0Nvc21pYy1OZXdzLTElNUNhc3Ryby1uZXdzJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNtYWlscyU1Q0Nvc21pYy1OZXdzLTElNUNhc3Ryby1uZXdzJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNxQjtBQUNsRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcbWFpbHNcXFxcQ29zbWljLU5ld3MtMVxcXFxhc3Ryby1uZXdzXFxcXGFwcFxcXFxhcGlcXFxcbmFzYVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbmFzYS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL25hc2FcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL25hc2Evcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxtYWlsc1xcXFxDb3NtaWMtTmV3cy0xXFxcXGFzdHJvLW5ld3NcXFxcYXBwXFxcXGFwaVxcXFxuYXNhXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnasa%2Froute&page=%2Fapi%2Fnasa%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnasa%2Froute.ts&appDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:assert":
/*!******************************!*\
  !*** external "node:assert" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:assert");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:console":
/*!*******************************!*\
  !*** external "node:console" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:console");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:dns":
/*!***************************!*\
  !*** external "node:dns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:dns");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ "node:http2":
/*!*****************************!*\
  !*** external "node:http2" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http2");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:perf_hooks":
/*!**********************************!*\
  !*** external "node:perf_hooks" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:perf_hooks");

/***/ }),

/***/ "node:querystring":
/*!***********************************!*\
  !*** external "node:querystring" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:querystring");

/***/ }),

/***/ "node:sqlite":
/*!******************************!*\
  !*** external "node:sqlite" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:sqlite");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:timers":
/*!******************************!*\
  !*** external "node:timers" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:timers");

/***/ }),

/***/ "node:tls":
/*!***************************!*\
  !*** external "node:tls" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tls");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "node:util/types":
/*!**********************************!*\
  !*** external "node:util/types" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util/types");

/***/ }),

/***/ "node:worker_threads":
/*!**************************************!*\
  !*** external "node:worker_threads" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:worker_threads");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/undici","vendor-chunks/iconv-lite","vendor-chunks/parse5","vendor-chunks/cheerio","vendor-chunks/css-select","vendor-chunks/entities","vendor-chunks/domutils","vendor-chunks/htmlparser2","vendor-chunks/whatwg-mimetype","vendor-chunks/nth-check","vendor-chunks/cheerio-select","vendor-chunks/whatwg-encoding","vendor-chunks/encoding-sniffer","vendor-chunks/domhandler","vendor-chunks/dom-serializer","vendor-chunks/css-what","vendor-chunks/parse5-parser-stream","vendor-chunks/parse5-htmlparser2-tree-adapter","vendor-chunks/domelementtype","vendor-chunks/safer-buffer","vendor-chunks/boolbase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fnasa%2Froute&page=%2Fapi%2Fnasa%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fnasa%2Froute.ts&appDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmails%5CCosmic-News-1%5Castro-news&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();